{"version":3,"sources":["helpers.js","Pokecard.js","Pokegame.js","Pokedex.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","className","this","props","name","style","pointerEvents","src","num","id","substr","length","alt","type","exp","Component","defaultProps","Pokedex","hand","map","pokemon","base_experience","isWinner","total","handOne","handTwo","idx","Math","floor","random","push","splice","handOneExp","v","reduce","r","handTwoExp","Pokegame","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a36dfd63.chunk.js","sourcesContent":["const data = [\n  { id: 4, name: \"Charmander\", type: \"fire\", base_experience: 62 },\n  { id: 7, name: \"Squirtle\", type: \"water\", base_experience: 63 },\n  { id: 11, name: \"Metapod\", type: \"bug\", base_experience: 72 },\n  { id: 12, name: \"Butterfree\", type: \"flying\", base_experience: 178 },\n  { id: 25, name: \"Pikachu\", type: \"electric\", base_experience: 112 },\n  { id: 39, name: \"Jigglypuff\", type: \"normal\", base_experience: 95 },\n//   { id: 94, name: \"Gengar\", type: \"poison\", base_experience: 225 },\n  { id: 94, name: \"Gengar\", type: \"poison\", base_experience: 183 },\n  { id: 133, name: \"Eevee\", type: \"normal\", base_experience: 65 }\n];\n\n// randomly shuffles the input array\nfunction shuffle(array) {\n  let len = array.length;\n  const result = [];\n  for (let i = 0; i < len; ) {\n    let index = Math.floor(Math.random() * len);\n    if (!result.includes(array[index])) {\n      result.push(array[index]);\n      i++;\n    }\n  }\n  return result;\n}\n\n// pads a 3 digit number with zeros.\nlet pad = (num) => \"000\".substr((num + \"\").length) + num;\n\nexport { data, shuffle, pad};","import React, { Component } from \"react\";\nimport { pad } from \"./helpers\";\nimport './Pokecard.css';\n\nconst useLargeImgs = true;\nconst IMG_API_MINI = 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/';\nconst IMG_API_LARGE = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/';\n\nclass Pokecard extends Component {\n  static defaultProps = {\n    name: \"Test\",\n    type: \"pika\"\n  };\n\n  render() {\n    return (\n      <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n        <h3 className=\"Pokecard-name\">{this.props.name}</h3>\n        <img\n          className=\"h-25\"\n          style={{ pointerEvents: \"none\" }}\n          src={\n            useLargeImgs\n              ? `${IMG_API_LARGE}${pad(this.props.id)}.png`\n              : `${IMG_API_MINI}${this.props.id}.png`\n          }\n          alt=\"pokemon\"\n        />\n        <p className=\"Pokecard-type\">{this.props.type}</p>\n        <p className=\"Pokecard-exp\">EXP: {this.props.exp}</p>\n      </div>\n    );\n  }\n}\n\nexport default Pokecard;\n","import React, { Component } from \"react\";\nimport { data } from './helpers';\nimport Pokedex from \"./Pokedex\";\n\n\nlet handOne = [];\nlet handTwo = [ ...data];\n\nwhile(handOne.length < handTwo.length) {\n  let idx = Math.floor(Math.random() * handTwo.length);\n  handOne.push(handTwo.splice([idx], 1)[0]);\n}\n\nconst handOneExp = handOne.map(v => v.base_experience).reduce((r, v) => r += v);\nconst handTwoExp = handTwo.map(v => v.base_experience).reduce((r, v) => r += v);\n\nclass Pokegame extends Component {\n  render() {\n    return (\n      <div>\n        <Pokedex hand={handOne} total={handOneExp} isWinner={handOneExp > handTwoExp} />\n        <Pokedex hand={handTwo} total={handTwoExp} isWinner={handOneExp < handTwoExp} />\n      </div>\n    );\n  }\n}\n\nexport default Pokegame;","import React, { Component } from 'react';\nimport Pokecard from './Pokecard';\n\nclass Pokedex extends Component {\n  render() {\n    let hand = this.props.hand.map(pokemon => {\n      return (\n        <Pokecard\n          id={pokemon.id}\n          name={pokemon.name}\n          type={pokemon.type}\n          exp={pokemon.base_experience}\n        />\n      );\n    });\n    return (\n      <div className=\"tc\">\n        <h3 className={this.props.isWinner ? 'dib br3 pa3 ma2 grow bw2 shadow-5 white bg-green' : ''}>\n            {this.props.isWinner ? 'THIS HAND WINS!!!' : ''}\n        </h3>\n        <h5>Total experience: {this.props.total}</h5> \n        <p>{hand}</p>\n      </div>\n    );\n  }\n}\n\nexport default Pokedex;","import React from \"react\";\nimport Pokegame from \"./Pokegame\";\nimport \"tachyons\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pokegame />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}